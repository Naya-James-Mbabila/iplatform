# **iPlatform Project Summary**  

## **Project Overview**  
We are building a **Django-based telemedicine platform** for **computer vision-based ocular health assessment**. The system allows users to upload eye images, which are analyzed for indicators like:  
- **Conjunctival redness** (allergies, infections)  
- **Scleral icterus** (jaundice, liver conditions)  
- **Conjunctival pallor** (anemia, vitamin deficiencies)  
- **Pupil reactions** (neurological conditions)  

The platform includes:  
âœ… **User authentication** (patients & doctors)  
âœ… **Image upload & analysis** (OpenCV-based processing)  
âœ… **Doctor dashboard** (for diagnosis)  
âœ… **Patient dashboard** (to view results)  
âœ… **HIPAA-compliant encryption** (AES-256 for secure data)  

---

## **Current Progress**  
### **1. Django Setup & Configuration**  
- Created a **virtual environment** (`venv`)  
- Installed required packages (`django, opencv-python, pillow, cryptography`)  
- Set up **Django project (`iplatform`)** and **app (`ocular`)**  

### **2. Database Models**  
| Model | Purpose | Fields |
|--------|---------|--------|
| `PatientProfile` | Stores patient details | `user (OneToOne), phone, location` |
| `OcularImage` | Stores uploaded eye images | `patient (ForeignKey), image, redness_score, pallor_score, icterus_score` |
| `DoctorDiagnosis` | Stores doctor's diagnosis | `image (ForeignKey), diagnosis (Text), doctor (ForeignKey)` |

### **3. Views & URLs**  
| View | URL | Purpose |
|------|-----|---------|
| `upload_view` | `/upload/` | Upload eye images for analysis |
| `analysis_view` | `/analysis/<image_id>/` | View analysis results |
| `dashboard` | `/` | Patient/Doctor dashboard |
| `register` | `/register/` | User registration |
| `login/logout` | `/login/`, `/logout/` | Authentication |

### **4. Templates**  
| File | Purpose |
|------|---------|
| `base.html` | Base template (Bootstrap) |
| `upload.html` | Image upload form |
| `analysis.html` | Displays analysis results |
| `doctor_dashboard.html` | Lists pending images for doctors |
| `patient_dashboard.html` | Shows patientâ€™s past uploads |
| `register.html` | User registration form |
| `login.html` | Login page |

### **5. Signals (Automated Profile Creation)**  
- **`signals.py`** â†’ Creates `PatientProfile` when a new user registers  

---

## **Folder Structure**  
```
iplatform_Project/  
â”œâ”€â”€ iplatform/  
â”‚   â”œâ”€â”€ __init__.py  
â”‚   â”œâ”€â”€ settings.py  
â”‚   â”œâ”€â”€ urls.py  
â”‚   â”œâ”€â”€ asgi.py  
â”‚   â””â”€â”€ wsgi.py  
â”œâ”€â”€ ocular/  
â”‚   â”œâ”€â”€ migrations/  
â”‚   â”œâ”€â”€ templates/  
â”‚   â”‚   â””â”€â”€ ocular/  
â”‚   â”‚       â”œâ”€â”€ base.html  
â”‚   â”‚       â”œâ”€â”€ upload.html  
â”‚   â”‚       â”œâ”€â”€ analysis.html  
â”‚   â”‚       â”œâ”€â”€ doctor_dashboard.html  
â”‚   â”‚       â”œâ”€â”€ patient_dashboard.html  
â”‚   â”‚       â”œâ”€â”€ register.html  
â”‚   â”‚       â””â”€â”€ login.html  
â”‚   â”œâ”€â”€ __init__.py  
â”‚   â”œâ”€â”€ admin.py  
â”‚   â”œâ”€â”€ apps.py  
â”‚   â”œâ”€â”€ models.py  
â”‚   â”œâ”€â”€ views.py  
â”‚   â”œâ”€â”€ forms.py  
â”‚   â””â”€â”€ signals.py  
â”œâ”€â”€ manage.py  
â”œâ”€â”€ db.sqlite3  
â”œâ”€â”€ media/  
â”‚   â””â”€â”€ ocular_images/  
â””â”€â”€ static/  
```

# **iPlatform Project - Comprehensive Summary Report**

## **1. Project Overview**
**Project Name:** iPlatform - Computer Vision-Based Ocular Health Assessment  
**Purpose:** A telemedicine platform for analyzing eye images to detect health indicators like anemia, jaundice, and vitamin deficiencies using AI.  
**Key Features:**
- User authentication (patients & doctors)  
- Image upload & AI analysis (OpenCV/Python)  
- Doctor dashboard for diagnosis  
- Patient health tracking  
- Secure data encryption (AES-256)  

---

## **2. Current Implementation Status**  
### âœ… **Completed Modules**  
1. **Core Infrastructure**  
   - Django project setup (`iplatform`)  
   - Custom `ocular` app configured  
   - PostgreSQL/MySQL-ready architecture  

2. **User Authentication**  
   - Login/logout system  
   - User registration  
   - Role-based access (patient vs. doctor)  

3. **Template System**  
   - Base template (`base.html`)  
   - Login/registration pages  
   - Doctor & patient dashboards  

4. **Database Models**  
   ```python
   class OcularImage(models.Model):
       patient = ForeignKey(User)
       image = ImageField(upload_to='ocular_images/')
       redness_score = FloatField()  # AI analysis results
       pallor_score = FloatField()
   ```

---

## **3. Technical Achievements**  
### ðŸ”§ **Solved Challenges**  
1. **Fixed `AppRegistryNotReady` Error**  
   - Restructured signals using `apps.py`'s `ready()` method  
   - Implemented lazy loading for models  

2. **Template Architecture**  
   - Corrected folder structure:  
     ```
     ocular/
     â””â”€â”€ templates/
         â””â”€â”€ ocular/
             â”œâ”€â”€ base.html
             â”œâ”€â”€ login.html
             â””â”€â”€ dashboards/
     ```  

3. **Authentication Flow**  
   - Customized Django's auth views  
   - Added Bootstrap styling to all auth pages  

---

## **4. Key Code Snippets**  
### **Signal Registration (apps.py)**  
```python 
class OcularConfig(AppConfig):
    def ready(self):
        from . import signals  # Signals load only after app initialization
```

### **View Logic (views.py)**  
```python
@login_required
def dashboard(request):
    if request.user.is_staff:  # Doctor view
        return render(request, 'ocular/doctor_dashboard.html')
    else:  # Patient view
        return render(request, 'ocular/patient_dashboard.html')
```

---

## **5. Screenshots of Progress**  
*(Hypothetical examples)*  
1. **Login Page**  
   ![Login screen with Bootstrap form]  
2. **Doctor Dashboard**  
   ![Table of pending analyses]  
3. **Patient Upload**  
   ![Image upload form with preview]  

---

## **6. Next Development Priorities**  
### ðŸš€ **Immediate Next Steps**  
1. **Image Processing Module**  
   - Implement OpenCV analysis for:  
     - Conjunctival redness detection  
     - Scleral icterus (yellowing) scoring  

2. **Enhanced Dashboards**  
   - Real-time analysis notifications  
   - Patient history timelines  

3. **Security**  
   - AES-256 encryption for uploaded images  
   - HIPAA-compliant data handling  

### ðŸ”® **Future Roadmap**  
- Mobile app integration (React Native)  
- PDF report generation  
- Multi-language support  

---

## **7. Lessons Learned**  
1. **Django Best Practices**  
   - Signals should always be registered in `apps.py`  
   - Template folders must match app names exactly  

2. **Debugging Tips**  
   - Use `python manage.py check --deploy` for pre-launch audits  
   - Django's `DEBUG=True` is invaluable during development  

3. **Collaboration**  
   - Version control (Git) is essential for team projects  
   - Document all environment configurations  

---

## **8. How to Run the Project**  
```bash
# Setup
python -m venv venv
source venv/bin/activate  # Windows: venv\Scripts\activate
pip install -r requirements.txt

# Run
python manage.py migrate
python manage.py createsuperuser
python manage.py runserver
```
Access: http://localhost:8000  

---

This report documents all critical progress and provides a clear roadmap. Would you like to focus on implementing any specific next feature in detail? The image analysis engine would be a high-impact next milestone.